name: Build Docker Images
on:
  workflow_dispatch: 
  push:
    branches:
      - main
jobs:
  publish:
    name: Publish Docker Container
    runs-on: ubuntu-latest
    steps:
      -
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Build and push web
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/girder.Dockerfile
          tags: ghcr.io/bryonlewis/dive-dsa/dive-dsa-web:latest
          push: true
      -
        name: Build and push worker
        uses: docker/build-push-action@v3
        with:
          context: .
          file: docker/girder_worker.Dockerfile
          tags: ghcr.io/bryonlewis/dive-dsa/dive-dsa-worker:latest
          push: true

  docs:
    name: Deploy docs
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        # "ref" specifies the branch to check out.
        # "github.event.release.target_commitish" is a global variable and specifies the branch the release targeted
        ref: ${{ github.event.release.target_commitish }}

    # Deploy docs
    - name: Deploy docs
      uses: mhausenblas/mkdocs-deploy-gh-pages@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CONFIG_FILE: mkdocs.yml
        EXTRA_PACKAGES: build-base
name: CI
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  build-and-test:
    defaults:
      run:
        working-directory: client
    strategy:
      matrix:
        target: ['web', 'lib']

    name: Client Tests
    runs-on: ubuntu-latest
    steps:
    -
      uses: actions/checkout@v2
    - 
      uses: actions/setup-node@v2
      with:
        node-version: '16.14.2'
    -
      name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    -
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - 
      name: Yarn install
      run: yarn install --frozen-lockfile
    -
      name: Lint
      if: ${{ matrix.target == 'web' }}
      run: yarn lint
    -
      name: Lint templates
      if: ${{ matrix.target == 'web' }}
      run: yarn lint:templates
    - 
      name: Run tests
      if: ${{ matrix.target == 'web' }}
      run: yarn test --collect-coverage
    -
      name: Build Web
      if: ${{ matrix.target == 'web' }}
      run: yarn build:web
      env:
        SENTRY_AUTH_TOKEN: ${{ github.ref == 'refs/heads/main' && secrets.SENTRY_AUTH_TOKEN || '' }}
    - 
      name: Build lib
      if: ${{ matrix.target == 'lib' }}
      run: yarn build:lib
  test-server:
    name: Server Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
    - name: Update Package References
      run: sudo apt-get update
    - name: Install system dependencies
      run: sudo apt-get install --no-install-recommends --yes
        python3-cachecontrol
        python3-dev
        python3-gdal 
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install tox
      run: pip install tox
    - name: Run Linting
      run: tox -e lint
      working-directory: server
    - name: Run tests
      run: tox -e testunit
      working-directory: server

